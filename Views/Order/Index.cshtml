
@{
    ViewData["Title"] = "Order Details";
}
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery AntiForgery

<div class="container mt-4">

    <h2>Create Order</h2>

    <form id="orderForm">
        @Html.AntiForgeryToken() @* Token render hidden input *@

        <div class="row g-2 align-items-center">

            <div class="col-md-5">

                <select id="productSelect" class="form-select">
                    <option value="">Select</option>
                    @foreach(var items in (SelectList)ViewBag.Products)
                    {
                        <option value="@items.Value">@items.Text</option>
                    }
                </select>

            </div>

            <div class="col-md-2">
                <input id="quantity" class="form-control" type="number" step="0.01" placeholder="Quantity" />
            </div>
            <div class="col-md-2">
                <input id="unit" class="form-control" type="text" placeholder="Unit (kg/pkt)" />
            </div>
            <div class="col-md-2">
                <input id="price" class="form-control" type="number" step="0.01" placeholder="Price" />
            </div>
            <div class="col-md-1">
                <button id="addButton" type="button" class="btn btn-success"> + </button>
            </div>

        </div>

    </form>

    <hr />

    <table class="table table-striped table-bordered" id="itemsTable">
        <thead>
            <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Unit</th>
                <th>Price</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>

    <div>
        <button id="submitOrder" class="btn btn-primary float-end">Submit Order</button>
    </div>

</div>


@section Scripts{
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>

        // client-side array to store items before saving
        let orderItems = [];

        function renderTable()
        {
            
            const tbody=$("#itemsTable tbody").empty();
            orderItems.forEach((item,index)=>{
                const row = `<tr>
                <td>${item.productName}</td>
                <td>${item.quantity}</td>
                <td>${item.unit}</td>
                <td>${item.price}</td>
                <td><button class="btn btn-sm btn-danger remove-btn" data-index="${index}">Remove</button></td>
                </tr>`;
        tbody.append(row);
            });
        }
        
         // Validate fields before adding
        function validateAdd(productId, productName, quantity, unit, price) {
            if (!productId) { alert("Please select a product."); return false; }
            if (!quantity || parseFloat(quantity) <= 0) { alert("Please enter quantity > 0"); return false; }
            if (!unit || unit.trim() === "") { alert("Please enter unit"); return false; }
            if (price === "" || isNaN(price) || parseFloat(price) < 0) { alert("Please enter valid price"); return false; }
            return true;
        }

        $("#addButton").on("click", function () {
            const productId = $("#productSelect").val();
            const productName = $("#productSelect option:selected").text();
            const quantity = $("#quantity").val();
            const unit = $("#unit").val();
            const price = $("#price").val();

            if (!validateAdd(productId, productName, quantity, unit, price)) return;

            orderItems.push({
                productId: parseInt(productId),
                productName,
                quantity: parseFloat(quantity),
                unit,
                price: parseFloat(price)
            }); 

            renderTable();

            // clear inputs
            $("#productSelect").val("");
            $("#quantity").val("");
            $("#unit").val("");
            $("#price").val("");
        });

           // Remove handler (event delegation)
        $("#itemsTable").on("click", ".remove-btn", function () {
            const idx = $(this).data("index");
            orderItems.splice(idx, 1);
            renderTable();
        });

        // Submit order — send JSON to SaveOrder

        $("#submitOrder").on("click", function ()
        {
            if (orderItems.length === 0) 
            {
                alert("No items to submit.");
                return;
            }

            // read antiforgery token value
            const token = $('input[name="__RequestVerificationToken"]').val();
            if (!token) 
            {
                alert("Security token missing. Reload the page.");
                return;
            }

            // payload: JSON array of objects (with controller DTO names)
            const payload = orderItems.map(i => ({
                ProductId: parseInt(i.productId, 10),
                Quantity: parseFloat(i.quantity),
                Unit: parseInt(i.unit),        
                Price: parseFloat(i.price)
            }));

            $.ajax({
                url: '@Url.Action("SaveOrder", "Order")',
                method: 'POST',
                contentType: 'application/json; charset=utf-8',
                data: JSON.stringify(payload),
                beforeSend: function (xhr) {
                    // set antiforgery token header
                    xhr.setRequestHeader('RequestVerificationToken', token);
                },
                success: function (res) {
                    if (res && res.success) {
                        alert("Order saved! ID: " + res.orderId);
                        orderItems = [];
                        renderTable();
                    } else {
                        alert("Server returned: " + (res && res.message ? res.message : "unknown"));
                    }
                },
                error: function (xhr, status, error) {
                    console.error("SaveOrder failed:", status, error);
                    console.log("XHR responseText:", xhr.responseText);
                    try {                      
                        var json = JSON.parse(xhr.responseText);
                        alert("Save failed: " + (json.message || xhr.status + " " + error));
                    } catch (e) {
                        alert("Save failed: " + xhr.status + " " + error);
                    }
                }
            });
        });




    </script>

}